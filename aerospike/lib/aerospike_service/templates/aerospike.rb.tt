# frozen_string_literal: true

# This module provides convenient namespace-specific methods
# for interacting with Aerospike via the AerospikeService gem.
#
# Generated by AerospikeService::ShortcutsGenerator
module Aerospike
<% AerospikeService.configuration.namespaces.each do |namespace| %>
  # Operations for the '<%= namespace %>' namespace
  module <%= namespace.capitalize %>
    class << self
      # Get a record by key
      # @param key [String] Record key
      # @param bin [String, Symbol, nil] Specific bin to retrieve, or nil for all bins
      # @return [Hash, nil] Record bins or nil if not found
      def get(key, bin = nil)
        AerospikeService.get(key, bin, "<%= namespace %>")
      end
      
      # Store a record
      # @param key [String] Record key
      # @param bins [Hash] Hash of bin names to values
      # @param ttl [Integer, nil] Time to live in seconds, or nil for no expiration
      # @return [Boolean] true if successful
      def put(key, bins, ttl = nil)
        AerospikeService.put(key, bins, "<%= namespace %>", ttl)
      end
      
      # Delete a record
      # @param key [String] Record key
      # @return [Boolean] true if deleted, false if not found
      def delete(key)
        AerospikeService.delete(key, "<%= namespace %>")
      end
      
      # Check if a record exists
      # @param key [String] Record key
      # @return [Boolean] true if exists, false otherwise
      def exists?(key)
        AerospikeService.exists?(key, "<%= namespace %>")
      end
      
      # Update the record's TTL
      # @param key [String] Record key
      # @param ttl [Integer, nil] New TTL in seconds, or nil for default
      # @return [Boolean] true if successful, false if not found
      def touch(key, ttl = nil)
        AerospikeService.touch(key, "<%= namespace %>", ttl)
      end
      
      # Increment a bin in a record
      # @param key [String] Record key
      # @param bin [String, Symbol] Bin to increment
      # @param value [Integer] Value to increment by, defaults to 1
      # @return [Boolean] true if successful
      def increment(key, bin, value = 1)
        AerospikeService.increment(key, bin, value, "<%= namespace %>")
      end
      
      # Get multiple records by keys
      # @param keys [Array<String>] Array of record keys
      # @param bin [String, Symbol, nil] Specific bin to retrieve, or nil for all bins
      # @return [Hash] Hash of keys to record bins
      def batch_get(keys, bin = nil)
        AerospikeService.batch_get(keys, bin, "<%= namespace %>")
      end
      
      # Create a Record instance for the given key
      # @param key [String] Record key
      # @return [AerospikeService::Record] Record instance
      def record(key)
        bins = get(key)
        AerospikeService::Record.new(key, bins, "<%= namespace %>")
      end
    end
  end
<% end %>
end
